//! D√©monstration du module de conformit√© et de d√©tection d'abus
//!
//! Ce script montre comment utiliser les fonctionnalit√©s de conformit√©
//! pour d√©tecter et g√©rer les comportements abusifs dans le syst√®me Agent-Karma.


use karma_core::compliance::*;


fn main() {
    println!("üîç D√©monstration du Module de Conformit√© Agent-Karma");
    println!("=====================================================\n");

    // D√©monstration 1: D√©tection de spam de ratings
    println!("1. üìä D√©tection de Spam de Ratings");
    println!(
        "   - Seuil de spam: {} ratings par heure",
        SPAM_RATING_THRESHOLD
    );
    println!(
        "   - Fen√™tre de d√©tection: {} secondes",
        RATING_PATTERN_WINDOW
    );
    println!("   - Variance minimale requise: {}", MIN_RATING_VARIANCE);
    println!();

    // D√©monstration 2: D√©tection de comportement de bot
    println!("2. ü§ñ D√©tection de Comportement de Bot");
    println!(
        "   - Seuil d'actions: {} actions par heure",
        BOT_BEHAVIOR_THRESHOLD
    );
    println!(
        "   - Ratio d'interactions suspectes: {}",
        SUSPICIOUS_INTERACTION_RATIO
    );
    println!();

    // D√©monstration 3: Syst√®me de p√©nalit√©s
    println!("3. ‚öñÔ∏è Syst√®me de P√©nalit√©s");
    println!(
        "   - Multiplicateur de p√©nalit√©: {}",
        KARMA_PENALTY_MULTIPLIER
    );
    println!("   - √âchelle de s√©v√©rit√©: 1-10");
    println!();

    // D√©monstration 4: Exemple de calcul de variance
    println!("4. üìà Calcul de Variance des Ratings");

    let scores_normaux = vec![6, 7, 8, 7, 6, 8, 7];
    let variance_normale = calculate_variance(&scores_normaux);
    println!(
        "   - Scores normaux {:?}: variance = {:.2}",
        scores_normaux, variance_normale
    );

    let scores_suspects = vec![5, 5, 5, 5, 5, 5, 5];
    let variance_suspecte = calculate_variance(&scores_suspects);
    println!(
        "   - Scores suspects {:?}: variance = {:.2}",
        scores_suspects, variance_suspecte
    );
    println!();

    // D√©monstration 5: Types de violations
    println!("5. üö® Types de Violations D√©tect√©es");
    println!("   - SpamRating: Fr√©quence √©lev√©e de ratings");
    println!("   - RatingManipulation: Patterns de manipulation");
    println!("   - BotBehavior: Comportement automatis√© suspect");
    println!("   - SuspiciousPattern: Autres patterns suspects");
    println!("   - RateLimitExceeded: D√©passement des limites");
    println!();

    // D√©monstration 6: Syst√®me de disputes
    println!("6. üèõÔ∏è Syst√®me de R√©solution de Disputes");
    println!("   - Les agents peuvent contester les violations");
    println!("   - Staking de karma requis pour cr√©er une dispute");
    println!("   - R√©solutions possibles:");
    println!("     * ViolationConfirmed: Violation confirm√©e");
    println!("     * ViolationOverturned: Violation annul√©e");
    println!("     * PartialOverturned: Violation partiellement annul√©e");
    println!();

    // D√©monstration 7: Rate limiting bas√© sur le karma
    println!("7. üéØ Rate Limiting Bas√© sur le Karma");
    println!("   - Karma > 1000: multiplicateur x2.0");
    println!("   - Karma > 500: multiplicateur x1.5");
    println!("   - Karma > 100: multiplicateur x1.2");
    println!("   - Karma ‚â§ 100: multiplicateur x1.0");
    println!();

    // Exemple pratique
    println!("8. üí° Exemple Pratique");
    println!("   Agent avec 1500 karma:");
    let base_limit = SPAM_RATING_THRESHOLD;
    let karma_multiplier = 2.0; // > 1000 karma
    let effective_limit = (base_limit as f64 * karma_multiplier) as u32;
    println!("   - Limite de base: {} ratings/heure", base_limit);
    println!("   - Limite effective: {} ratings/heure", effective_limit);
    println!();

    println!("‚úÖ Module de conformit√© pr√™t pour la production!");
    println!("   - D√©tection automatique d'abus");
    println!("   - Syst√®me de p√©nalit√©s √©quitable");
    println!("   - M√©canisme de dispute transparent");
    println!("   - Rate limiting adaptatif");
}

#[cfg(test)]
mod demo_tests {
    use super::*;

    #[test]
    fn test_variance_calculation_demo() {
        // Test avec des scores vari√©s (comportement normal)
        let normal_scores = vec![6, 7, 8, 7, 6, 8, 7, 6, 8];
        let normal_variance = calculate_variance(&normal_scores);
        assert!(normal_variance > MIN_RATING_VARIANCE);

        // Test avec des scores identiques (comportement suspect)
        let suspicious_scores = vec![5, 5, 5, 5, 5, 5, 5];
        let suspicious_variance = calculate_variance(&suspicious_scores);
        assert!(suspicious_variance < MIN_RATING_VARIANCE);
    }

    #[test]
    fn test_karma_multiplier_demo() {
        // Simuler diff√©rents niveaux de karma et leurs multiplicateurs
        let test_cases = vec![
            (50, 1.0),   // Karma faible
            (150, 1.2),  // Karma moyen
            (750, 1.5),  // Karma √©lev√©
            (1500, 2.0), // Karma tr√®s √©lev√©
        ];

        for (karma, expected_multiplier) in test_cases {
            let multiplier = if karma > 1000 {
                2.0
            } else if karma > 500 {
                1.5
            } else if karma > 100 {
                1.2
            } else {
                1.0
            };

            assert_eq!(multiplier, expected_multiplier);

            let effective_limit = (SPAM_RATING_THRESHOLD as f64 * multiplier) as u32;
            println!(
                "Karma {}: limite effective {} ratings/heure",
                karma, effective_limit
            );
        }
    }

    #[test]
    fn test_penalty_calculation_demo() {
        // Tester le calcul des p√©nalit√©s selon la s√©v√©rit√©
        let severities = vec![1, 3, 5, 7, 10];

        for severity in severities {
            let penalty = KARMA_PENALTY_MULTIPLIER * (severity as u128);
            println!("S√©v√©rit√© {}: p√©nalit√© {} karma", severity, penalty);

            // V√©rifier que les p√©nalit√©s sont proportionnelles
            assert_eq!(penalty, KARMA_PENALTY_MULTIPLIER * (severity as u128));
        }
    }
}
